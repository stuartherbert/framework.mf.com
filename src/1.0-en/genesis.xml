<?xml version="1.0" encoding="utf-8" ?>

<chapter id="genesis">
  <title>Genesis</title>

  <section id="genesis.keyquestions">
    <title>The Key Questions</title>
    <para>
      The Methodosity Framework is the result of attempting to answer these key questions:
    </para>

    <itemizedlist>
      <listitem>
        <para>
          How can we create PHP-based applications quicker?
        </para>
      </listitem>
      <listitem>
        <para>
          How can we make our PHP-based applications easier to maintain, especially for developers who didn't write the original code?
        </para>
      </listitem>
      <listitem>
        <para>
          How do we make a PHP-based framework that runs as quickly as possible, so that your app doesn't need lots of extra servers when it starts to get popular?
        </para>
      </listitem>
    </itemizedlist>

    <para>
      We believe that a framework should answer <emphasis>all</emphasis> of these questions equally well. We couldn't find one that did, so reluctantly we decided to build our own. But first we thought we'd explain what we mean by a framework.
    </para>
  </section>

  <section id="genesis.framework">
    <title>What We Mean By A Framework</title>
    <para>
      A framework is an opinionated philosophy that gives you the principles and practices to follow to achieve something. It sets the strategy, tells you about everything you need to do, and gives you the detail on how to do it.
    </para>
    <para>
      A component library, by contrast, gives you targetted tools to do one job well.
    </para>
    <para>
      When you adopt a framework, it isn't like picking up a hammer to bash down a nail. Components in a component library are hammers (and frequently nails too). With a framework, you're picking up the Art of War. You're picking up the Book of Five Rings. You're buying into a philosophy, a way of thinking and of conducting the battle.  Your opponents in this battle are time and your pointy-haired boss, and the terrain is the set of ideas that you're trying to turn into a great web app.
    </para>
    <para>
      The best frameworks are epic in scope. They tell you how to win. They provide you with tools to help you do it, but they also give you room to think for yourself and to find your own way to apply what they're selling. They have strong opinions which shape and polish all that they offer, and if you don't like those opinions, go pick another framework, because you'll spend all of your time fighting the framework instead of embracing it.
    </para>
    <para>
      And remember; there's no such thing as the OneTrueFramework(tm). Very little in the world is right and wrong; there's just plain wrong, and the rest are mostly philosophical differences. The Methodosity Framework is our philosophy taught through the language of code. It isn't for everyone, and that's alright too.
    </para>
  </section>

  <section id="genesis.createQuicker">
    <title>Creating Applications Quicker</title>

    <para>
      What's the first bottleneck in development? It's the time it takes developers to create a new application (or to rewrite / replace an existing one). Ideas are only as valuable as your ability to execute them before someone else gets there first.
    </para>

    <para>
      At the heart of this lies a single challenge: how can you spend all of your time creating the features that makes the application unique / special? You want to be spending all of your time, expending all of your energy, fixing all of your focus on what makes your application stand out, on what your app needs to be able to do so that it can ship and be a success.
    </para>
    <para>
      Time spent anywhere else slows down your execution.
    </para>
    <para>
      There are frameworks out there that are speed up development by focusing on code.  They rely on abstraction layers to hide difficult things from you, scaffolding to create the first version of your app's pages for you, and plugins to provide whole sections of functionality for you.  We recommend that you investigate these frameworks for yourself, as they might be very suitable for your needs and approach.
    </para>
    <para>
      At Methodosity, we're all about people, and our framework is exploring a layered approach to speeding up development by focusing on the developer instead. We don't want to create a framework that does things for dumbed-down developers; we want to create a framework that empowers developers to run riot.  You'll see this throughout our guiding principles and the code that we ship.
    </para>
    <para>
      Another important aspect of our work is making sure that we simply don't shift the burden and bottlenecks from initial development to the maintenance phase. Is there any point in writing code that you can't afford to maintain?
    </para>
  </section>

  <section id="genesis.easierMaintenance">
    <title>Making Maintenance Easier</title>

    <para>
      Maintenance is everything that happens after your website has shipped. 
    </para>
    <para>
      Many projects (such as temporary websites for an advertising campaign) need little or no maintenance. Once built, they are unlikely to need to change significantly during their lifetime.  They are perhaps best delivered using an app-as-a-framework such as Wordpress, Drupal or Joomla.  True apps end up being used in anger for a lot longer than anyone intended, especially if they prove to be successful, and once launched they are likely to need constant updating to keep up with requests from users and pressures from the competition.
    </para>
    <para>
      Your app will spend most of its existance being maintained, and there's a good chance that more development effort will go into maintenance than did into creating the app.  That makes maintenance the single biggest bottleneck in development today.
    </para>
    <para>
      Maintenance comes in two forms: bug fixing, and changing the functionality.  Both typically need to be done urgently, which can be a challenge as the original developer(s) tend to move on, leaving the job of maintenance to someone else to do.  It is clearly a good idea to make it easier to maintain code. But how can we achieve that? 
    </para>
    <para>
      At Methodosity, we believe that the answer to that lies in the people creating the original application. If the original developers ship an application that is straightforward to learn, quick to disect in an emergency, flexible for change, and not riddled with bugs, then the maintainers are inheriting a good starting point for the work that they then have to do. After that, the challenge is making sure that the maintainers don't degrade the app either.
    </para>
    <para>
      Our framework is exploring ways for the original developers to achieve their goals without transfering problems and ultimately costs to the maintainers instead.
    </para>
  </section>

  <section id="genesis.frameworkPerformance">
    <title>Making Faster Frameworks</title>
    <para>
      On your laptop, or in the bedroom, all code runs quickly. You're the only person using it, and chances are you're using your app exactly as you intended it to be used. All that changes once you start letting other people use it. If they tell their friends about it, and it starts to get popular, hopefully your app's going to get some action. Maybe even some serious action. But not if it's a fat lady that is struggling under its own weight.
    </para>
    <para>
      For the vast majority of folks trying to make a living writing code, hosting is expensive. Moving from shared hosting to a VPS to a dedicated box to a dedicated cluster might be a quick way to deal with performance problems, but it's also a great way to waste valuable cash. You might be keeping the folks at Dell and HP in a job, but wouldn't you rather keep that cash in your pocket?
    </para>
    <para>
      There's also the serious point of doing your bit for the planet. You might not believe in climate change, but it's one of those things that doesn't care whether you believe in it or not. More servers means more manufacturing; more electricity to run the servers and the datacentres; and of course all the emissions pumped out by the beardy weirdies who make it all work.
    </para>
    <para>
      By choosing a scripting language like PHP, you're already eating up a load of CPU cycles on your servers. (This is where we should say something nice about Java, but we just can't bring ourselves to do it. We tried, honest guv!) It's pretty selfish and irresponsible to then run bloatware in PHP, making the world need even more servers ... don't you think?
    </para>
  </section>

  <section id="genesis.guidelines">
    <title>Turning Ideas Into Action</title>
    <para>
      Out of these questions has come the Methodosity Framework ... and behind the answers that our framework expresses, we've pulled out a set of core principles to guide our work over the lifetime of the framework.
    </para>
    <para>
      These principles are listed in the next chapter.
    </para>
  </section>
</chapter>
<!-- vim: set tabstop=2 shiftwidth=2 expandtab: -->
